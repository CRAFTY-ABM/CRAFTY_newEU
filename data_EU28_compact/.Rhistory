install.packages("readxl")
install.packages("readxl", type="source")
out_dt = read.csv("ParameterDesign/Full scenario maps_IAP/RCP2_6-SSP1-2020-full-map.csv")
sum(out_dt$Crop.productivity)
library(mlrMBO)
library(mlr)
install.packages("mlrMBO")
# # Purpose
# This Vignette shows you how to use mlrMBO for a guided optimization. In this setting mlrMBO proposes a candidate configuration and you can then decide for yourself whether you want to evaluate it or another value. You have to evaluate the objective function manually. The value and the result have to be feed back to mlrMBO. Afterwards you can request the next candidate and so on.
# Introduction
# Before we start the optimization you need to define the search space:
ps = makeParamSet(
makeNumericParam("q", lower = -1, upper = 2),
makeIntegerParam("v", lower = -2, upper = 3)
)
ps
# Furthermore we need an initial design that includes the results of the evaluated function
des = generateDesign(n = 7, par.set = ps)
des
library(mlr)
# install.packages("lhs")
library(mlrMBO)
# install.packages("DiceKriging")
# install.packages("rgenoud")
# Various infill criteria (aka. acquisition functions) are available:
#
# Expected improvement (EI)
# Upper/Lower confidence bound (LCB, aka. statistical lower or upper bound)
# Augmented expected improvement (AEI)
# Expected quantile improvement (EQI)
# API for custom infill criteria
#
# # Purpose
# This Vignette shows you how to use mlrMBO for a guided optimization. In this setting mlrMBO proposes a candidate configuration and you can then decide for yourself whether you want to evaluate it or another value. You have to evaluate the objective function manually. The value and the result have to be feed back to mlrMBO. Afterwards you can request the next candidate and so on.
# Introduction
# Before we start the optimization you need to define the search space:
ps = makeParamSet(
makeNumericParam("q", lower = -1, upper = 2),
makeIntegerParam("v", lower = -2, upper = 3)
)
ps
# Furthermore we need an initial design that includes the results of the evaluated function
des = generateDesign(n = 7, par.set = ps)
des
# After evaluating the objective function manually we can add the results
des$y = c(1.20, 0.97, 0.91, 3.15, 0.58, 1.12, 0.50)
# Now we define our mlrMBO-Control object. For this example we stick to the defaults except that we set the infill-criterion to the Expected Improvement
ctrl = makeMBOControl()
ctrl = setMBOControlInfill(ctrl, crit = crit.ei)
# These information are enough to get us started and initialize the sequential MBO.
opt.state = initSMBO(par.set = ps, design = des, control = ctrl, minimize = TRUE, noisy = FALSE)
# At each state the opt.state object can be plotted to visualize the predictions of the surrogate model
plot(opt.state)
# The first panel shows the value of the infill criterion. The higher the value the more this area is desirable to be explored to find the optimum. In the following panels the mean prediction of the surrogate and the uncertainty estimation is plotted.
# Let’s see which point MBO suggests we should evaluate in the next step:
proposePoints(opt.state)
# We don’t have to stick to the suggestion and evaluate another point:
x = data.frame(q = 1.7, v = 1)
# After we evaluated the objective function manually we get a return value of 2.19. We take both values to update MBO:
updateSMBO(opt.state, x = x, y = 2.19)
# Now we can plot the state again and ask for a proposal:
plot(opt.state)
install.packages("rgenoud")
install.packages("DiceKriging")
install.packages("DiceKriging")
install.packages("lhs")
install.packages("lhs")
library(mlr)
# install.packages("lhs")
library(mlrMBO)
# install.packages("DiceKriging")
# install.packages("rgenoud")
# Introduction
# Before we start the optimization you need to define the search space:
ps = makeParamSet(
makeNumericParam("q", lower = -1, upper = 2),
makeIntegerParam("v", lower = -2, upper = 3)
)
ps
# Furthermore we need an initial design that includes the results of the evaluated function
des = generateDesign(n = 7, par.set = ps)
des
# After evaluating the objective function manually we can add the results
des$y = c(1.20, 0.97, 0.91, 3.15, 0.58, 1.12, 0.50)
# Now we define our mlrMBO-Control object. For this example we stick to the defaults except that we set the infill-criterion to the Expected Improvement
ctrl = makeMBOControl()
ctrl = setMBOControlInfill(ctrl, crit = crit.ei)
# These information are enough to get us started and initialize the sequential MBO.
opt.state = initSMBO(par.set = ps, design = des, control = ctrl, minimize = TRUE, noisy = FALSE)
# At each state the opt.state object can be plotted to visualize the predictions of the surrogate model
plot(opt.state)
# The first panel shows the value of the infill criterion. The higher the value the more this area is desirable to be explored to find the optimum. In the following panels the mean prediction of the surrogate and the uncertainty estimation is plotted.
# Let’s see which point MBO suggests we should evaluate in the next step:
proposePoints(opt.state)
# We don’t have to stick to the suggestion and evaluate another point:
x = data.frame(q = 1.7, v = 1)
# After we evaluated the objective function manually we get a return value of 2.19. We take both values to update MBO:
updateSMBO(opt.state, x = x, y = 2.19)
# Now we can plot the state again and ask for a proposal:
plot(opt.state)
(prop = proposePoints(opt.state))
# This time we evaluated the exact proposed points and get a value of 0.13.
updateSMBO(opt.state, x = prop$prop.points, y = 0.13)
# Let’s assume we want to stop here. To get to the usual MBO result you can call:
res = finalizeSMBO(opt.state)
res$x
res$y
install.packages(c("infotheo", "Kendall", "mlr", "mlrMBO"))
install.packages(c("infotheo", "Kendall", "mlr", "mlrMBO"))
install.packages("EasyABC")
setwd("~/Dropbox/KIT_Modelling/CRAFTY/crafty_cobra_impressions_kit_data/data_EU28/")
dt = read.csv("worlds/EU/regionalisations/28/LandUseRestriction/RestrictedLanduse_random.csv")
dt$X = NULL
dt$X.1 = NULL
dt = data.frame(dt)
dt_new =  data.frame(Latitude = dt$Latitude, Longitude = dt$Longitude)
restr_random = sample(x = c("Y", "N"), size = nrow(dt_new), prob = c(0.7, 0.3), replace=T)
table(restr_random)
dt_new$Restricted = factor(restr_random)
library(sp)
dt_sp = SpatialPointsDataFrame(coords = cbind(dt_new$Longitude, dt_new$Latitude), data = dt_new)
spplot(dt_sp, "Restricted", pch=1, cex=0.1)
write.csv(dt_new, file = "worlds/EU/regionalisations/28/LandUseRestriction/RestrictedLanduse_random.csv")
write.csv(dt_new, file = "worlds/EU/regionalisations/28/LandUseRestriction/RestrictedLanduse_random.csv", quote = F)
str(dt_new)
dt
str(dt)
dt = read.csv("worlds/EU/regionalisations/28/LandUseRestriction/RestrictedLanduse_random.csv")
str(dt)
plot(dt$Latitude)
dt$X = NULL
dt$X.1 = NULL
dt = data.frame(dt)
dg
dt
dt = read.csv("worlds/EU/regionalisations/28/LandUseRestriction/RestrictedLanduse_template.csv.csv")
colnames(dt)
dt = read.csv("worlds/EU/regionalisations/28/LandUseRestriction/RestrictedLanduse_template.csv")
colnames(dt)
colnames(dt)
dt$X = NULL
dt$X.1 = NULL
dt_new = data.frame(X=dt$Longitude, Y=dt$Latitude)
restr_random = sample(x = c("Y", "N"), size = nrow(dt_new), prob = c(0.7, 0.3), replace=T)
table(restr_random)
table(restr_random)
dt_new$Restricted = factor(restr_random)
Restricted
dt_new$Restricted
str(dt_new)
dt_new = data.frame(x=dt$Longitude, y=dt$Latitude)
restr_random = sample(x = c("Y", "N"), size = nrow(dt_new), prob = c(0.7, 0.3), replace=T)
table(restr_random)
dt_new$Restricted = factor(restr_random)
str(dt_new)
write.csv(dt_new, file = "worlds/EU/regionalisations/28/LandUseRestriction/RestrictedLanduse_random.csv", quote = F)
